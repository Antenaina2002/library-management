openapi: 3.0.3
info:
  title: Library API
  version: 1.10.0
  description: STD22001
servers:
  - url: https://library.com
paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      security:
        - adminAuth: []  # Operation accessible to administrators
        - visitorAuth: []  # Operation accessible to visitors
      description: |
        The returned books are ordered by updated datetime.
        Supports pagination with the following query parameters:
        - page: The page number for pagination 1 by default
        - pageSize: The number of items per page for pagination 50 by default
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/queryPagination'
        - in: query
          name: releaseDateMin
          description: |
            If  `releaseDateMax` is not provided, `releaseDateMin` is ignored.
            `releaseDateMin` can not be after `releaseDateMax`.
          schema:
            type: string
            format: date
          required: false
        - in: query
          name: releaseDateMax
          description: |
            If  `releaseDateMin` is not provided, `releaseDateMax` is ignored.
            `releaseDateMax` can not be after `releaseDateMin`.
          schema:
            type: string
            format: date
          required: false
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
                  body:
                    type: array
                    items:
                      $ref: '#/components/schemas/Book'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
    put:
      tags:
        - Books
      summary: Create or update a list of books
      security:
        - adminAuth: []  # Operation accessible to administrators
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
                  body:
                    items:
                      $ref: '#/components/schemas/Book'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
  /books/{bookId}/authors/{authorId}:
    put:
      tags:
        - Books
      summary: Attach an author to a book
      security:
        - adminAuth: []  # Operation accessible to administrators
      operationId: attachAuthorToBook
      parameters:
        - name: bookId
          in: path
          description: ID of the book attached to the author
          schema:
            type: string
          required: true
        - name: authorId
          in: path
          description: ID of the author attached to the book
          schema:
            type: string
          required: true
      responses:
        200:
          description: The updated book with the attached author
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
                  body:
                    items:
                      $ref: '#/components/schemas/Book'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
  /books/authors:
    put:
      tags:
        - Books
      summary: Update authors of multiple books
      operationId: updateBooksAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateBookAuthor'
      responses:
        200:
          description: The list of updated books
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
                  body:
                    items:
                      $ref: '#/components/schemas/Book'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
  /available-books:
    get:
      tags:
        - Books
      summary: Get all available books
      operationId: getAvailableBooks
      responses:
        200:
          description: The list of available books
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
                  body:
                    type: array
                    items:
                      $ref: '#/components/schemas/Book'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
  /books/import:
    post:
      tags:
        - Books
      summary: Import books
      security:
        - adminAuth: []  # Operation accessible to administrators
      operationId: importBooks
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/ImportBookFromExcel'
                - $ref: '#/components/schemas/ImportBookFromJSON'
          application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
            schema:
              type: string
              format: binary
      responses:
        200:
          description: The list of imported books
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
                  body:
                    type: array
                    items:
                      $ref: '#/components/schemas/Book'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
  /authors:
    get:
      summary: Get all authors
      security:
        - adminAuth: []  # Operation accessible to administrators
        - visitorAuth: []  # Operation accessible to visitors
      operationId: getAuthors
      tags:
        - Authors
      parameters:
        - name: authorName
          in: query
          description: |
            Filter returned authors by given name. 
            If not provided, then list is not filtered.
          schema:
            type: string
          required: false
        - $ref: '#/components/parameters/queryPagination'
      responses:
        200:
          description: The list of filtered authors
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
                  body:
                    type: array
                    items:
                      $ref: '#/components/schemas/Author'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
    put:
      summary: Create or update authors
      security:
        - adminAuth: []  # Operation accessible to administrators
      operationId: crupdateAuthors
      tags:
        - Authors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'
      responses:
        200:
          description: The list of created or updated authors
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
                  body:
                    items:
                      $ref: '#/components/schemas/Author'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
  /authors/{aId}:
    delete:
      summary: Delete an author
      security:
        - adminAuth: []  # Operation accessible to administrators
      operationId: deleteAuthor
      tags:
        - Authors
      parameters:
        - name: aId
          in: path
          description: Author identifier to be deleted
          schema:
            type: string
          required: true
      responses:
        200:
          description: The author deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
                  body:
                    items:
                      $ref: '#/components/schemas/Author'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
  /authors/import:
    post:
      tags:
        - Authors
      summary: Import authors
      security:
        - adminAuth: []  # Operation accessible to administrators
      operationId: importAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ImportAuthor'
          application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
            schema:
              type: string
              format: binary
      responses:
        200:
          description: The list of imported authors
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
                  body:
                    type: array
                    items:
                      $ref: '#/components/schemas/Author'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
  /visitors:
    get:
      summary: Get all visitors
      operationId: getVisitors
      tags:
        - Visitors
      responses:
        200:
          description: The list of visitors
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
                  body:
                    type: array
                    items:
                      $ref: '#/components/schemas/Visitor'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
    put:
      summary: Create a new visitor
      operationId: createVisitor
      tags:
        - Visitors
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Visitor'
      responses:
        200:
          description: Created visitor
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
                  body:
                    items:
                      $ref: '#/components/schemas/Visitor'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
  /visitors/{visitorId}:
    get:
      summary: Get a specific visitor by ID
      operationId: getVisitorById
      tags:
        - Visitors
      parameters:
        - name: visitorId
          in: path
          description: ID of the visitor to retrieve
          schema:
            type: integer
          required: true
      responses:
        200:
          description: The visitor with the specified ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
                  body:
                    type: array
                    items:
                      $ref: '#/components/schemas/Visitor'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
  /visitors/search:
    get:
      summary: search visitors by name or reference
      operationId: searchVisitorsByNameOrReference
      tags:
        - Visitors
      parameters:
        - name: visitorName
          in: query
          description: Name of the visitor to search
          schema:
            type: string
          required: false
        - name: reference
          in: query
          description: Reference of the visitor to search
          schema:
            type: string
            enum:
              - vst12345
          required: false
      responses:
        200:
          description: The list of visitors matching the specified name or reference
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
                  body:
                    type: array
                    items:
                      $ref: '#/components/schemas/Visitor'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
  /visitors/{visitorId}/borrow/{bookId}:
    post:
      tags:
        - Visitors
      summary: borrowing a book
      security:
        - adminAuth: []  # Operation accessible to administrators
      operationId: borrowBook
      parameters:
        - name: visitorId
          in: path
          description: visitor Id borrowing the book
          schema:
            type: integer
          required: true
        - name: bookId
          in: path
          description: book Id to borrow
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BorrowBook'
      responses:
        200:
          description: book borrowed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
                  body:
                    type: string
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
components:

  securitySchemes:
    adminAuth:
      type: apiKey
      name: Authorization
      in: header
      description: Utilisé par les administrateurs pour s'authentifier.

    visitorAuth:
      type: apiKey
      name: Authorization
      in: header
      description: Utilisé par les visiteurs pour s'authentifier.

  responses:
    400:
      description: bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                $ref: '#/components/schemas/Status'
    403:
      description: forbidden request
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                $ref: '#/components/schemas/Status'
    404:
      description: Not found
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                $ref: '#/components/schemas/Status'
    500:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                $ref: '#/components/schemas/Status'
      
  schemas:
    Status:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
    ImportBookFromExcel:
      type: object
      properties:
        excelFile:
          type: string
          format: binary
    ImportBookFromJSON:
      type: object
      properties:
        jsonFile:
          type: string
          format: binary
    CrupdateBook:
      allOf:
        - $ref: '#/components/schemas/Book'
        - type: object
          properties:
            author:
              nullable: true
    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: string
        authorId:
          type: string
    BorrowBook:
      type: object
      properties:
        visitor:
          $ref: '#/components/schemas/Visitor'
        book:
          $ref: '#/components/schemas/Book'
    BookBorrowHistory:
      type: object
      properties:
        bookId:
          type: string
        borrowedBy:
          $ref: "#/components/schemas/Visitor"
        borrowedDate:
          type: string
          format: date-time
        returnedDate:
          type: string
          format: date-time
    ReturnBook:
      type: object
      properties:
        visitor:
          $ref: '#/components/schemas/Visitor'
        book:
          $ref: '#/components/schemas/Book'
    Book:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        author:
          $ref: '#/components/schemas/Author'
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
        isBorrowed:
          type: boolean
    Author:
      type: object
      properties:
        id:
          type: string
        authorName:
          type: string
        sex:
          $ref: '#/components/schemas/Sex'
    Sex:
      type: string
      enum:
        - M
        - F
    ImportAuthor:
      type: object
      properties:
        authorName:
          type: string
        sex:
          $ref: '#/components/schemas/Sex'
    ImportBook:
      type: object
      properties:
        bookName:
          type: string
        author:
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
        idAuthor:
          type: string
    Visitor:
      type: object
      properties:
        id:
          type: integer
        visitorName:
          type: string
        reference:
          type: string
          enum:
            - vst12345
        borrowHistory:
          type: array
          items:
            $ref: '#/components/schemas/BookBorrowHistory'
  parameters:
    queryPagination:
      in: query
      name: page
      description: Pagination's page number
      schema:
        type: integer
        default: 1
    pathPagination:
      in: path
      name: page
      description: The page number of pagination
      schema:
        type: integer
        default: 1
      required: true
