openapi: 3.0.3
info:
  title: Library API
  version: 1.10.0
  description: STD22001
servers:
  - url: https://library.com
paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: |
        The returned books are ordered by updated datetime.
        Supports pagination with the following query parameters:
        - page: The page number for pagination 1 by default
        - pageSize: The number of items per page for pagination 50 by default
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/queryPagination'
        - in: query
          name: releaseDateMin
          description: |
            If  `releaseDateMax` is not provided, `releaseDateMin` is ignored.
            `releaseDateMin` can not be after `releaseDateMax`.
          schema:
            type: string
            format: date
          required: false
        - in: query
          name: releaseDateMax
          description: |
            If  `releaseDateMin` is not provided, `releaseDateMax` is ignored.
            `releaseDateMax` can not be after `releaseDateMin`.
          schema:
            type: string
            format: date
          required: false
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
                  body:
                    type: array
                    items:
                      $ref: '#/components/schemas/Book'
    put:
      tags:
        - Books
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
                  body:
                    items:
                      $ref: '#/components/schemas/Book'
  /books/{bookId}/authors/{authorId}:
    put:
      tags:
        - Books
      summary: Attach an author to a book
      operationId: attachAuthorToBook
      parameters:
        - name: bookId
          in: path
          description: ID of the book attached to the author
          schema:
            type: string
          required: true
        - name: authorId
          in: path
          description: ID of the author attached to the book
          schema:
            type: string
          required: true
      responses:
        200:
          description: The updated book with the attached author
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
                  body:
                    items:
                      $ref: '#/components/schemas/Book'
  /books/authors:
    put:
      tags:
        - Books
      summary: Update authors of multiple books
      operationId: updateBooksAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateBookAuthor'
      responses:
        200:
          description: The list of updated books
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
                  body:
                    items:
                      $ref: '#/components/schemas/Book'
  /books/import:
    post:
      tags:
        - Import
      summary: Import books
      operationId: importBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ImportBook'
          application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
            schema:
              type: string
              format: binary
      responses:
        200:
          description: The list of imported books
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
                  body:
                    type: array
                    items:
                      $ref: '#/components/schemas/Book'
  /authors:
    get:
      summary: Get all authors
      operationId: getAuthors
      tags:
        - Authors
      parameters:
        - name: authorName
          in: query
          description: |
            Filter returned authors by given name. 
            If not provided, then list is not filtered.
          schema:
            type: string
          required: false
        - $ref: '#/components/parameters/queryPagination'
      responses:
        200:
          description: The list of filtered authors
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
                  body:
                    type: array
                    items:
                      $ref: '#/components/schemas/Author'
    put:
      summary: Create or update authors
      operationId: crupdateAuthors
      tags:
        - Authors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'
      responses:
        200:
          description: The list of created or updated authors
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
                  body:
                    items:
                      $ref: '#/components/schemas/Author'
  /authors/{aId}:
    delete:
      summary: Delete an author
      operationId: deleteAuthor
      tags:
        - Authors
      parameters:
        - name: aId
          in: path
          description: Author identifier to be deleted
          schema:
            type: string
          required: true
      responses:
        200:
          description: The author deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
                  body:
                    items:
                      $ref: '#/components/schemas/Author'
  /authors/import:
    post:
      tags:
        - Import
      summary: Import authors
      operationId: importAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ImportAuthor'
          application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
            schema:
              type: string
              format: binary
      responses:
        200:
          description: The list of imported authors
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
                  body:
                    type: array
                    items:
                      $ref: '#/components/schemas/Author'
components:
  schemas:
    Status:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
    ImportBookFromExcel:
      type: object
      properties:
        excelFile:
          type: string
          format: binary
    ImportBookFromJSON:
      type: object
      properties:
        jsonFile:
          type: string
          format: binary
    CrupdateBook:
      allOf:
        - $ref: '#/components/schemas/Book'
        - type: object
          properties:
            author:
              nullable: true
    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: string
        authorId:
          type: string
    Book:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        author:
          $ref: '#/components/schemas/Author'
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
    Author:
      type: object
      properties:
        id:
          type: string
        authorName:
          type: string
        sex:
          $ref: '#/components/schemas/Sex'
    Sex:
      type: string
      enum:
        - M
        - F
    ImportAuthor:
      type: object
      properties:
        authorName:
          type: string
        sex:
          $ref: '#/components/schemas/Sex'
    ImportBook:
      type: object
      properties:
        bookName:
          type: string
        author:
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
        idAuthor:
          type: string
  parameters:
    queryPagination:
      in: query
      name: page
      description: Pagination's page number
      schema:
        type: integer
        default: 1
    pathPagination:
      in: path
      name: page
      description: The page number of pagination
      schema:
        type: integer
        default: 1
      required: true